@use "sass:map";

$serif: Georgia, serif;
$sans: Tahoma, sans-serif;
$mono: monospace;

body {
  font-family: $sans;
  margin: 0;
}

@mixin holders($holders) {
  @each $holder in $holders {
    label[for="#{$holder}"] {
      grid-area: #{$holder}-label;
    }

    ##{$holder} {
      grid-area: #{$holder}-element;
    }
  }
}

@mixin text-input {
  border-radius: 5px;
  border: 2px groove lightgray;
}

@mixin checkbox {
  display: none;
  & + label::before {
    display: inline-block;
    content: "\00A0";
    font-size: 100%;
    line-height: 1em;
    text-align: center;
    border: 1px solid gray;
    border-radius: 0.15em;
    width: 1em;
    height: 1em;
    margin-right: 0.5em;
  }
  &:hover + label {
    $background-color: rgb(220, 220, 220);
    box-shadow: 0 0 3px 3px $background-color;
    background-color: $background-color;
  }
  &:disabled + label::before {
    $background-color: darkgrey;
    box-shadow: 0 0 3px 3px $background-color;
    background-color: $background-color;
  }
  &:checked + label::before {
    content: "\2713";
  }
  &:active + label::before {
    background-color: gray;
  }
}

@mixin button {
  @include text-input;
  font-size: 1rem;
  padding: 0.1em 1.8em;
  background-color: rgb(240, 240, 240);
  user-select: none;
  &:hover {
    background-color: white;
  }
  &:active {
    box-shadow: inset 0 0 8px lightgrey;
  }
}

@mixin chip {
  border: 1px solid gray;
  padding: 0 0.4em;
  border-radius: 0.5em;
  box-shadow: 0 0 2px 2px lightgray;
  font-style: italic;
}

nav.menu {
  display: flex;
  justify-content: space-between;
  background: linear-gradient(to bottom, white, rgb(220, 220, 220));
  padding: 0 0.5em;

  button, a {
    padding: 0.2em 0.5em;
    background: unset;
    border: unset;
    font-size: 1rem;

    $shadow: 0 0 4px rgb(120, 120, 120);

    &:hover {
      box-shadow: $shadow;
      cursor: pointer;
    }

    &:active {
      box-shadow: inset $shadow;
    }
  }

  span.spacer {
    margin-left: auto;
  }
}

.page {
  margin: 0.5em;

  button {
    @include button;
  }

  &.app {
    display: grid;
    grid-template-areas:
      "kalip-input-label   kalip-output-label"
      "kalip-input-element kalip-output-element"
      "text-input-label    text-output-label"
      "text-input-element  text-output-element";
    grid-template-columns: repeat(2, 1fr);
    grid-column-gap: 1em;
    grid-row-gap: 2px;

    @include holders(("kalip-input", "kalip-output", "text-input", "text-output"));

    #text-output {
      align-self: start;

      p {
        margin: 0;
      }
    }

    #text-input {
      width: 100%;
      border: 0;
      resize: none;
      overflow: hidden;
      padding: 0;
    }

    #kalip-output {
      font-family: $mono;
      letter-spacing: 0.3em;
      line-height: 160%;
      background-color: rgb(240, 240, 240);
      box-shadow: inset 0 0 4px lightgray;
    }

    .aruz-output {
      span.separator:not(:last-child) {
        &::after {
          content: "\5C";
          font-family: $mono;
          color: gray;
        }
      }


      $hece-colors: (
              "open": rgba(63, 127, 255, 0.25),
              "closed": rgba(255, 255, 0, 0.25),
              "medli": rgba(255, 0, 0, 0.25),
      );

      $hece-decorations: (
              "open": 1px double underline,
              "closed": 3px solid underline,
              "medli": 3px dotted underline,
      );

      @each $type, $color in $hece-colors {
        span.#{$type} {
          background-color: $color;
          text-decoration: var(--used-#{$type}-decoration);
          @at-root :root {
            --visible-#{$type}-decoration: #{map.get($hece-decorations, $type)};
          }
        }
      }

      span.errored {
        border-color: darkred;
        border-style: dashed;
        border-width: 3px;
        cursor: pointer;
      }
    }

    .aruz-kalip {
      @include text-input;
      font-size: larger;
    }

    .aruz-text {
      font-family: $serif;
      font-size: large;
    }
  }

  &.settings {
    input[type=text] {
      width: 75%;
      float: right;
      @include text-input;
    }

    input[type=checkbox] {
      @include checkbox;
    }

    label {
      display: inline;

      &[data-before-element] {
        width: 25%;
      }
    }

    .row {
      margin-bottom: 1em;
    }

    .additional-links {
      font-size: 80%;

      display: flex;
      flex-direction: column;
      gap: 0.5em;
      align-items: flex-end;
      margin: 0.5em 0;
    }
  }

  &.dictionary {
    input, select {
      font-size: 1rem;
    }

    input[data-kalip] {
      font-family: $mono;
    }

    input[type=checkbox] {
      @include checkbox;
      &+label {
        border: 1px solid lightgray;
        border-radius: 2px;
        padding: 2px;
      }
    }

    .actions {
      margin: 1em 0;
    }

    .filter {
      margin: 1em 0;

      &#syllable-count-filter {
        input[type=number] {
          width: 3em;
        }
      }
    }

    .pagination-holder {
      display: flex;
      justify-content: center;
      margin: 1em;
      gap: 0.3em;

      input[type=number] {
        width: 3em;
      }
    }

    .filtered-words-holder {
      padding: 1em;
      min-height: 10em;
      border: 1px solid gray;
      box-shadow: inset 0 0 15px 1px gray;
      font-family: $serif;

      .stats-holder {
        font-size: 90%;
      }

      #word-information {
        width: calc(100vw - 10em);
        border: 1px solid gray;
        border-radius: 3px;
        box-shadow: 0 0 3px 3px lightgray;
        position: absolute;
        background: white;
        padding: 2em;
        overflow: auto;

        button.wordpeep-close-button {
          position: absolute;
          left: 1em;
          top: 1em;
          border-radius: 1em;
          height: 2em;
          width: 2em;
          padding: 0;
        }

        h1.wordpeep-title {
          margin-left: 3rem;
          display: inline;
        }

        .wordpeep-common-properties {
          margin-left: 1em;
          display: inline-flex;
          gap: 0.5em;

          .wordpeep-common-property { @include chip; }

          .wordpeep-cp-prefix::after {
            content: "-";
          }

          .wordpeep-cp-suffix::before {
            content: "-";
          }
        }

        .wordpeep-meaning {
          &:not(:first-child) {
            margin-top: 1.5em;
          }

          h2.wordpeep-examples-title {
            font-size: 1em;
            margin: 0;

            &::after {
              content: ":";
            }
          }

          .wordpeep-meaning-properties-list {
            display: inline-flex;
            gap: 0.5em;
            margin-right: 0.5em;

            .wordpeep-meaning-property { @include chip; }
          }
        }



        h2.wordpeep-proverbs-title {
          margin-bottom: 0;

          &::after {
            content: ":";
          }
        }

        .wordpeep-example {
          .wordpeep-example-text {
            display: inline-block;
          }
          .wordpeep-writer-name {
            display: inline-block;
            font-weight: bold;
            margin-left: 1em;
          }
        }
      }

      span[data-kalip] {
        font-family: $mono;
        color: gray;
        font-size: 90%;
        user-select: none;
      }
    }

    .info {
      font-size: 80%;

      display: flex;
      flex-direction: column;
      gap: 0.5em;
      align-items: flex-end;
      margin: 0.5em 0;
    }
  }

  &.license {
    font-family: $serif;
  }
}

label, nav {
  user-select: none;
}

:focus {
  outline: rgba(0, 0, 0, 80) dotted 1px;
  outline-offset: 2px;
}

*.inactive {
  display: none !important;
}